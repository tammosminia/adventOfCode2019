module Day11 where

import Data.List
--import Data.Map as Map
import Intcode

input1 :: Program
input1 = [3,8,1005,8,324,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,1001,8,0,29,1,1107,14,10,1006,0,63,1006,0,71,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,1002,8,1,61,1,103,18,10,1006,0,14,1,105,7,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,101,0,8,94,1006,0,37,1006,0,55,2,1101,15,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,0,10,4,10,101,0,8,126,2,1006,12,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1001,8,0,152,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,101,0,8,173,1006,0,51,1006,0,26,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,1001,8,0,202,2,8,18,10,1,103,19,10,1,1102,1,10,1006,0,85,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,1001,8,0,238,2,1002,8,10,1006,0,41,3,8,102,-1,8,10,1001,10,1,10,4,10,108,0,8,10,4,10,101,0,8,267,2,1108,17,10,2,105,11,10,1006,0,59,1006,0,90,3,8,1002,8,-1,10,1001,10,1,10,4,10,1008,8,1,10,4,10,1001,8,0,304,101,1,9,9,1007,9,993,10,1005,10,15,99,109,646,104,0,104,1,21102,936735777688,1,1,21101,341,0,0,1105,1,445,21101,0,937264173716,1,21101,352,0,0,1106,0,445,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,3245513819,0,1,21102,1,399,0,1105,1,445,21102,1,29086470235,1,21102,410,1,0,1105,1,445,3,10,104,0,104,0,3,10,104,0,104,0,21101,825544712960,0,1,21102,1,433,0,1106,0,445,21102,825460826472,1,1,21101,0,444,0,1106,0,445,99,109,2,22102,1,-1,1,21101,0,40,2,21101,0,476,3,21102,466,1,0,1105,1,509,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,471,472,487,4,0,1001,471,1,471,108,4,471,10,1006,10,503,1101,0,0,471,109,-2,2106,0,0,0,109,4,2101,0,-1,508,1207,-3,0,10,1006,10,526,21101,0,0,-3,21202,-3,1,1,21201,-2,0,2,21101,0,1,3,21101,0,545,0,1105,1,550,109,-4,2105,1,0,109,5,1207,-3,1,10,1006,10,573,2207,-4,-2,10,1006,10,573,21202,-4,1,-4,1106,0,641,21202,-4,1,1,21201,-3,-1,2,21202,-2,2,3,21101,0,592,0,1105,1,550,22101,0,1,-4,21101,1,0,-1,2207,-4,-2,10,1006,10,611,21102,1,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,633,22101,0,-1,1,21102,633,1,0,105,1,508,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2105,1,0]
day11ProgramC :: Program
day11ProgramC = [3, 8, 1005, 8, 301, 1106, 0, 11, 0, 0, 0, 104, 1, 104, 0, 3, 8, 102, -1, 8, 10, 1001, 10, 1, 10, 4, 10, 1008, 8, 0, 10, 4, 10, 1002, 8, 1, 29, 1, 1103, 7, 10, 3, 8, 102, -1, 8, 10, 101, 1, 10, 10, 4, 10, 108, 1, 8, 10, 4, 10, 1002, 8, 1, 54, 2, 103, 3, 10, 2, 1008, 6, 10, 1006, 0, 38, 2, 1108, 7, 10, 3, 8, 102, -1, 8, 10, 1001, 10, 1, 10, 4, 10, 108, 1, 8, 10, 4, 10, 1001, 8, 0, 91, 3, 8, 1002, 8, -1, 10, 1001, 10, 1, 10, 4, 10, 1008, 8, 0, 10, 4, 10, 101, 0, 8, 114, 3, 8, 1002, 8, -1, 10, 101, 1, 10, 10, 4, 10, 1008, 8, 1, 10, 4, 10, 1001, 8, 0, 136, 3, 8, 1002, 8, -1, 10, 1001, 10, 1, 10, 4, 10, 1008, 8, 1, 10, 4, 10, 1002, 8, 1, 158, 1, 1009, 0, 10, 2, 1002, 18, 10, 3, 8, 102, -1, 8, 10, 101, 1, 10, 10, 4, 10, 108, 0, 8, 10, 4, 10, 1002, 8, 1, 187, 2, 1108, 6, 10, 3, 8, 1002, 8, -1, 10, 1001, 10, 1, 10, 4, 10, 108, 0, 8, 10, 4, 10, 1002, 8, 1, 213, 3, 8, 1002, 8, -1, 10, 101, 1, 10, 10, 4, 10, 1008, 8, 1, 10, 4, 10, 1001, 8, 0, 236, 1, 104, 10, 10, 1, 1002, 20, 10, 2, 1008, 9, 10, 3, 8, 102, -1, 8, 10, 101, 1, 10, 10, 4, 10, 108, 0, 8, 10, 4, 10, 101, 0, 8, 269, 1, 102, 15, 10, 1006, 0, 55, 2, 1107, 15, 10, 101, 1, 9, 9, 1007, 9, 979, 10, 1005, 10, 15, 99, 109, 623, 104, 0, 104, 1, 21102, 1, 932700598932, 1, 21102, 318, 1, 0, 1105, 1, 422, 21102, 1, 937150489384, 1, 21102, 329, 1, 0, 1105, 1, 422, 3, 10, 104, 0, 104, 1, 3, 10, 104, 0, 104, 0, 3, 10, 104, 0, 104, 1, 3, 10, 104, 0, 104, 1, 3, 10, 104, 0, 104, 0, 3, 10, 104, 0, 104, 1, 21101, 46325083227, 0, 1, 21102, 376, 1, 0, 1106, 0, 422, 21102, 3263269927, 1, 1, 21101, 387, 0, 0, 1105, 1, 422, 3, 10, 104, 0, 104, 0, 3, 10, 104, 0, 104, 0, 21102, 988225102184, 1, 1, 21101, 410, 0, 0, 1105, 1, 422, 21101, 868410356500, 0, 1, 21102, 1, 421, 0, 1106, 0, 422, 99, 109, 2, 21202, -1, 1, 1, 21102, 1, 40, 2, 21102, 1, 453, 3, 21102, 1, 443, 0, 1105, 1, 486, 109, -2, 2106, 0, 0, 0, 1, 0, 0, 1, 109, 2, 3, 10, 204, -1, 1001, 448, 449, 464, 4, 0, 1001, 448, 1, 448, 108, 4, 448, 10, 1006, 10, 480, 1102, 1, 0, 448, 109, -2, 2106, 0, 0, 0, 109, 4, 1201, -1, 0, 485, 1207, -3, 0, 10, 1006, 10, 503, 21101, 0, 0, -3, 22101, 0, -3, 1, 21201, -2, 0, 2, 21102, 1, 1, 3, 21101, 0, 522, 0, 1105, 1, 527, 109, -4, 2106, 0, 0, 109, 5, 1207, -3, 1, 10, 1006, 10, 550, 2207, -4, -2, 10, 1006, 10, 550, 22102, 1, -4, -4, 1105, 1, 618, 21201, -4, 0, 1, 21201, -3, -1, 2, 21202, -2, 2, 3, 21102, 569, 1, 0, 1106, 0, 527, 22101, 0, 1, -4, 21101, 0, 1, -1, 2207, -4, -2, 10, 1006, 10, 588, 21102, 1, 0, -1, 22202, -2, -1, -2, 2107, 0, -3, 10, 1006, 10, 610, 21201, -1, 0, 1, 21101, 610, 0, 0, 105, 1, 485, 21202, -2, -1, -2, 22201, -4, -2, -4, 109, -5, 2105, 1, 0]

type RobotPos = (Int, Int)
type Color = Int --0=black, 1=white
type PaintedPanel = (Color, RobotPos, Color)
data Direction = UpD | RightD | DownD | LeftD deriving (Enum, Show)

--instance Show PaintedPanels where
printPanels ps = putStr $ unlines $ map showLine sys
  where
    positions = map (\(_, p, _) -> p) ps
    xs = map fst positions
    ys = map snd positions
    sxs = [(minimum xs)..(maximum xs)]
    sys = [(minimum ys)..(maximum ys)]
    showLine y = map (\x -> if (colorAt (x, y) ps) == 1 then '#' else '.') sxs



stepRobot :: RunningProgram -> Input -> (RunningProgram, [Output])
stepRobot p i = case (stepToOutput $ feedInput p i) of
  (halfProg, []) -> (halfProg, [])
  (halfProg, [color]) ->
    let (newProg, [t]) = stepToOutput halfProg
    in (newProg, [color, t])

move :: Direction -> RobotPos -> RobotPos
move UpD (x, y) = (x, y - 1)
move DownD (x, y) = (x, y + 1)
move LeftD (x, y) = (x - 1, y)
move RightD (x, y) = (x + 1, y)

colorAt :: RobotPos -> [PaintedPanel] -> Color
colorAt pos painted = case (filter (\(_, p, c) -> p == pos) painted) of
  [] -> 0
  l -> c where (_, _, c) = last l

turn :: Int -> Direction -> Direction
turn 0 UpD = LeftD
turn 0 x = pred x
turn 1 LeftD = UpD
turn 1 x = succ x

paint :: RunningProgram -> [PaintedPanel] -> [PaintedPanel]
paint p ps = paintR p ps (0,0) UpD
  where
    paintR prog panels pos direction
      | output == [] = panels
      | length output == 1 = panels
      | otherwise = paintR newProg newPanels newPos newDir
      where
        color = colorAt pos panels
        (newProg, output) = stepRobot prog color
        [newColor, t] = output
        newPanels = panels ++ [(color, pos, newColor)]
        newDir = turn t direction
        newPos = move newDir pos

count :: [PaintedPanel] -> Int
count ps = length $ group $ sort $ map (\(_,p,_) -> p) ps

prog1 = RunningProgram { position = 0, program = input1, inputs = [], relativeBase = 0 }
paint1 = paint prog1 []
answer1 = count paint1

progc = createRP day11ProgramC []
paintc = paint progc []

paint2 = paint prog1 [(0, (0,0), 1)]
answer2 = printPanels paint2
